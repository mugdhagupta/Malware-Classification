#!/usr/bin/python

import json
import numpy as np
import pandas as pd
import itertools
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
from matplotlib.pyplot import *
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, f1_score
import xgboost as xgb
from sklearn import metrics
from numpy import array
from sklearn.metrics import accuracy_score
from xgboost import plot_importance
from matplotlib import pyplot
from numpy import sort
from xgboost import XGBClassifier
from sklearn.feature_selection import SelectFromModel
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
# Confusion plot
import operator
from matplotlib import pyplot
from sklearn.metrics import confusion_matrix
import itertools
import matplotlib.pyplot as plt

network = ["Total HTTP Packets", "HTTP Request Packets", "SEARCH", "NOTIFY", "GET", "POST", "HTTP Response Packets", "Success", "Server Error", "Client Error", "Redirection", "ip", "udp", "dns", "llmnr", "mdns", "data", "ssdp", "nbns", "tcp", "ssl", "icmp", "igmp", "ratio public private", "private ip", "dead host", "domain", "ip entropy", "tcp entropy", "http entropy"]

signature = ["One or more martian processes was created", "Performs some HTTP requests", "One or more potentially interesting buffers were extracted, these generally contain injected code, configuration data, etc.", "Creates a windows hook that monitors keyboard input (keylogger)", "Starts servers listening", "Operates on local firewall's policies and settings", "Repeatedly searches for a not-found process, you may want to run a web browser during analysis", "Created a service where a service was also not started", "One or more processes crashed", "Creates a shortcut to an executable file", "Stops Windows services", "A process created a hidden window", "Writes a potential ransom message to disk", "Drops a binary and executes it", "Connects to IP addresses that are no longer responding to requests (legitimate services will remain up-and-running  usually)", "Allocates read-write-execute memory (usually to unpack itself)", "Attempts to modify Explorer settings to prevent file extensions from being displayed", "Tries to locate where the browsers are installed", "Connects to a Dynamic DNS Domain", "Collects information to fingerprint the system (MachineGuid, DigitalProductId, SystemBiosDate)", "Steals private information from local Internet browsers", "Checks the version of Bios, possibly for anti-virtualization", "Executes one or more WMI queries which can be used to identify virtual machines", "Executes one or more WMI queries", "Queries information on disks, possibly for anti-virtualization", "modify_security_center_warnings", "Attempts to modify Explorer settings to prevent hidden files from being displayed", "Detects VMWare through the in instruction feature", "Installs itself for autorun at Windows startup", "Disables Windows Security features", "Checks for the presence of known windows from debuggers and forensic tools", "Uses Windows utilities for basic Windows functionality", "Creates a service", "Creates a slightly modified copy of itself", "Generates some ICMP traffic", "Queries the disk size which could be used to detect virtual machine with small fixed size or dynamic allocation", "Queries for the computername", "One or more of the buffers contains an embedded PE file", "Creates a suspicious process", "Expresses interest in specific running processes", 
"Executed a process and injected code into it, probably while unpacking", "Checks for the presence of known devices from debuggers and forensic tools", "Deletes its original binary from disk", "Checks amount of memory in system, this can be used to detect virtual machines that have a low amount of memory available", "Checks adapter addresses which can be used to detect virtual network interfaces", "Potentially malicious URLs were found in the process memory dump", "Connects to an IP address that is no longer responding to requests (legitimate services will remain up-and-running usually)", "Attempts to modify browser security settings", "Resolves a suspicious Top Level Domain (TLD)", "Detects the presence of Wine emulator", "Creates known Fynloski/DarkComet files, registry keys and/or mutexes", "Creates known Bifrose files, registry keys and/or mutexes", "Collects information about installed applications", "Checks for known Chinese AV sofware registry keys", "Attempts to identify installed AV products by registry key", "Creates or sets a registry key to a long series of bytes, possibly to store a binary or malware config", "Detects VMWare through the presence of a registry key", "Detects virtualization software with SCSI Disk Identifier trick(s)", "Creates an autorun.inf file", "Harvests credentials from local FTP client softwares", "Creates known KolaBC Worm files, registry keys and/or mutexes", "Uses Windows APIs to generate a cryptographic key", "Checks the CPU name from registry, possibly for anti-virtualization", "Harvests credentials from local email clients"]

bins = ["netapi", "certificate", "__notification__", "network", "services", "exception", "crypto", "ole", "resource", "ui", "synchronisation", "misc", "process", "file", "system", "registry"]

process = ['process_count', 'dropped_files']

def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    print(cm)

    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt),
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')


traindata_backdoor = "path_to/backdoor/train_combined.csv"
traindata_trojan = "path_to/trojan/train_combined_smote_type.csv"
traindata_trojandrop = "path_to/trojandrop/train_combined.csv"
traindata_trojandown = "path_to/trojandown/binary_oversampling_type/train_combined_smote.csv"
traindata_virus = "path_to/virus/train_combined_smote_type.csv"
traindata_worms = "path_to/worms/train_combined.csv"


testdata_backdoor = "path_to/backdoor/test_combined_wo_sality.csv"
testdata_trojan = "path_to/trojan/test_combined_wo_Sality.csv"
testdata_trojandrop = "path_to/trojandrop/test_combined_wo_sality.csv"
testdata_trojandown = "path_to/trojandown/test_combined_wo_Sality.csv"
testdata_virus = "path_to/virus/test_combined_wo_sality_type.csv"
testdata_worms = "path_to/worms/test_combined_wo_sality.csv"

testdata = "path_to/test_combined_wo_Sality_type.csv"

combinedtrain_backdoor = pd.read_csv(traindata_backdoor)
combinedtrain_trojan = pd.read_csv(traindata_trojan)
combinedtrain_trojandrop = pd.read_csv(traindata_trojandrop)
combinedtrain_trojandown = pd.read_csv(traindata_trojandown)
combinedtrain_virus = pd.read_csv(traindata_virus)
combinedtrain_worms = pd.read_csv(traindata_worms)

combinedtest_backdoor = pd.read_csv(testdata_backdoor)
combinedtest_trojan = pd.read_csv(testdata_trojan)
combinedtest_trojandrop = pd.read_csv(testdata_trojandrop)
combinedtest_trojandown = pd.read_csv(testdata_trojandown)
combinedtest_virus = pd.read_csv(testdata_virus)
combinedtest_worms = pd.read_csv(testdata_worms)


test = pd.read_csv(testdata)
test =  test.reset_index(drop=True)

combinedtrain_backdoor = combinedtrain_backdoor.reset_index(drop=True)
combinedtrain_trojan = combinedtrain_trojan.reset_index(drop=True)
combinedtrain_trojandrop = combinedtrain_trojandrop.reset_index(drop=True)
combinedtrain_trojandown = combinedtrain_trojandown.reset_index(drop=True)
combinedtrain_virus = combinedtrain_virus.reset_index(drop=True)
combinedtrain_worms = combinedtrain_worms.reset_index(drop=True)

combinedtest_backdoor = combinedtest_backdoor.reset_index(drop=True)
combinedtest_trojan = combinedtest_trojan.reset_index(drop=True)
combinedtest_trojandrop = combinedtest_trojandrop.reset_index(drop=True)
combinedtest_trojandown = combinedtest_trojandown.reset_index(drop=True)
combinedtest_virus = combinedtest_virus.reset_index(drop=True)
combinedtest_worms = combinedtest_worms.reset_index(drop=True)



worms = ['worms', 'others']
virus = ['virus', 'others']
trojandrop = ['trojandropper', 'others']
trojandown = ['trojandownloader', 'others']
trojan = ['trojan', 'others']
backdoor = ['backdoor', 'others']
family_list = ['worms','virus','trojandropper', 'trojandownloader','trojan', 'backdoor']


lab_encoder_worms = LabelEncoder().fit(worms)
lab_encoder_virus = LabelEncoder().fit(virus)
lab_encoder_trojandrop = LabelEncoder().fit(trojandrop)
lab_encoder_trojandown = LabelEncoder().fit(trojandown)
lab_encoder_trojan = LabelEncoder().fit(trojan)
lab_encoder_backdoor = LabelEncoder().fit(backdoor)

lab_encoder = LabelEncoder().fit(family_list)

def pre_process_data(data, lab_encoder):
	list_family = []
	len_data = len(data)
	i=0

	for row in data.iterrows():
		i+=1
		if i % 500 == 0:
		    print("%s | %s rows" % (i, len_data))
		type_labelized = lab_encoder.transform([row[1].family])[0]
        	list_family.append(type_labelized)
	
	data = data.drop(['family', 'sha256'] , axis=1) 
	
	feat_names = list(data)	
	list_X = data#.values
	list_family = np.array(list_family)
	return list_X, list_family, feat_names

X_train_backdoor, y_train_backdoor, feat_names = pre_process_data(combinedtrain_backdoor, lab_encoder_backdoor)
X_train_trojan, y_train_trojan, feat_names = pre_process_data(combinedtrain_trojan, lab_encoder_trojan)
X_train_trojandownloader, y_train_trojandownloader, feat_names = pre_process_data(combinedtrain_trojandown, lab_encoder_trojandown)
X_train_trojandropper, y_train_trojandropper, feat_names = pre_process_data(combinedtrain_trojandrop, lab_encoder_trojandrop)
X_train_virus, y_train_virus, feat_names = pre_process_data(combinedtrain_virus, lab_encoder_virus)
X_train_worms, y_train_worms, feat_names = pre_process_data(combinedtrain_worms, lab_encoder_worms)

X_test_backdoor, y_test_backdoor, feat_names = pre_process_data(combinedtest_backdoor, lab_encoder_backdoor)
X_test_trojan, y_test_trojan, feat_names = pre_process_data(combinedtest_trojan, lab_encoder_trojan)
X_test_trojandownloader, y_test_trojandownloader, feat_names = pre_process_data(combinedtest_trojandown, lab_encoder_trojandown)
X_test_trojandropper, y_test_trojandropper, feat_names = pre_process_data(combinedtest_trojandrop, lab_encoder_trojandrop)
X_test_virus, y_test_virus, feat_names = pre_process_data(combinedtest_virus, lab_encoder_virus)
X_test_worms, y_test_worms, feat_names = pre_process_data(combinedtest_worms, lab_encoder_worms)

X_test, y_test, feat_names = pre_process_data(test, lab_encoder)

#print feat_names

print X_test_backdoor.shape, y_test_backdoor.shape
print X_test_trojan.shape, y_test_trojan.shape
print X_test_trojandownloader.shape, y_test_trojandownloader.shape
print X_test_trojandropper.shape,y_test_trojandropper.shape
 
RANDOM_SEED = 10

param = {
    'bst:max_depth': 10,
    'bst:eta': 0.1,
    'silent': 1,
    'colsample_bytree': 0.5,
    'objective': 'multi:softprob',
    'min_child_weight': 1,
    'subsample': 0.9,
    'num_class': 2,
    'nthread': 4,
    'seed': RANDOM_SEED
}
ITERATIONS = 300

num_round = 1000


xg_train_backdoor = xgb.DMatrix(X_train_backdoor, label=y_train_backdoor)
xg_test_backdoor = xgb.DMatrix(X_test_backdoor, label=y_test_backdoor)
watchlist = [(xg_train_backdoor, 'train'), (xg_test_backdoor, 'test')]
bst_backdoor = xgb.train(param, xg_train_backdoor, num_round, watchlist, early_stopping_rounds=6)

importance_df =  pd.DataFrame(bst_backdoor.get_fscore().items(), columns=['feature','importance']).sort_values('importance', ascending=False)
importance_df = importance_df.nlargest(25, 'importance')
print importance_df.feature.values

X_train_backdoor = X_train_backdoor[importance_df.feature.values]
X_test_backdoor = X_test_backdoor[importance_df.feature.values]

X_train_backdoor = X_train_backdoor.values
X_test_backdoor = X_test_backdoor.values

xg_train_backdoor = xgb.DMatrix(X_train_backdoor, label=y_train_backdoor)
xg_test_backdoor = xgb.DMatrix(X_test_backdoor, label=y_test_backdoor)
watchlist = [(xg_train_backdoor, 'train'), (xg_test_backdoor, 'test')]
bst_backdoor = xgb.train(param, xg_train_backdoor, num_round, watchlist, early_stopping_rounds=6)
preds_backdoor = bst_backdoor.predict(xg_test_backdoor)
colno = lab_encoder_backdoor.transform(["backdoor"])[0]
print colno
L = preds_backdoor[:, colno]
df = pd.DataFrame({'backdoor':L})








xg_train_trojan = xgb.DMatrix(X_train_trojan, label=y_train_trojan)
xg_test_trojan = xgb.DMatrix(X_test_trojan, label=y_test_trojan)
watchlist = [(xg_train_trojan, 'train'), (xg_test_trojan, 'test')]
bst_trojan = xgb.train(param, xg_train_trojan, num_round, watchlist, early_stopping_rounds=6)

importance_df =  pd.DataFrame(bst_trojan.get_fscore().items(), columns=['feature','importance']).sort_values('importance', ascending=False)
importance_df = importance_df.nlargest(25, 'importance')
#print importance_df.feature.values
#X_train_trojan = X_train_trojan[importance_df.feature.values]
#X_test_trojan = X_test_trojan[importance_df.feature.values]

mergedlist = network + bins
X_train_trojan = X_train_trojan[mergedlist]
X_test_trojan = X_test_trojan[mergedlist]

X_train_trojan = X_train_trojan.values
X_test_trojan = X_test_trojan.values

xg_train_trojan = xgb.DMatrix(X_train_trojan, label=y_train_trojan)
xg_test_trojan = xgb.DMatrix(X_test_trojan, label=y_test_trojan)
watchlist = [(xg_train_trojan, 'train'), (xg_test_trojan, 'test')]
bst_trojan = xgb.train(param, xg_train_trojan, num_round, watchlist, early_stopping_rounds=6)
preds_trojan = bst_trojan.predict(xg_test_trojan)
colno = lab_encoder_trojan.transform(["trojan"])[0]
print colno
L = preds_trojan[:, colno]
df['trojan'] = L






xg_train_trojandownloader = xgb.DMatrix(X_train_trojandownloader, label=y_train_trojandownloader)
xg_test_trojandownloader = xgb.DMatrix(X_test_trojandownloader, label=y_test_trojandownloader)
watchlist = [(xg_train_trojandownloader, 'train'), (xg_test_trojandownloader, 'test')]
bst_trojandownloader = xgb.train(param, xg_train_trojandownloader, num_round, watchlist, early_stopping_rounds=6)

#importance_df =  pd.DataFrame(bst_trojandownloader.get_fscore().items(), columns=['feature','importance']).sort_values('importance', ascending=False)
#importance_df = importance_df.nlargest(25, 'importance')
#print importance_df.feature.values

#X_train_trojandownloader = X_train_trojandownloader[importance_df.feature.values]

mergedlist = process + signature
X_train_trojandownloader = X_train_trojandownloader[mergedlist]
X_test_trojandownloader = X_test_trojandownloader[mergedlist]

X_train_trojandownloader = X_train_trojandownloader.values
X_test_trojandownloader = X_test_trojandownloader.values

xg_train_trojandownloader = xgb.DMatrix(X_train_trojandownloader, label=y_train_trojandownloader)
xg_test_trojandownloader = xgb.DMatrix(X_test_trojandownloader, label=y_test_trojandownloader)
watchlist = [(xg_train_trojandownloader, 'train'), (xg_test_trojandownloader, 'test')]
bst_trojandownloader = xgb.train(param, xg_train_trojandownloader, num_round, watchlist, early_stopping_rounds=6)
preds_trojandownloader = bst_trojandownloader.predict(xg_test_trojandownloader)
colno = lab_encoder_trojandown.transform(["trojandownloader"])[0]
print colno
L = preds_trojandownloader[:, colno]
df['trojandownloader'] = L

plot_importance(bst_trojandownloader)
pyplot.show()




xg_train_trojandropper = xgb.DMatrix(X_train_trojandropper, label=y_train_trojandropper)
xg_test_trojandropper = xgb.DMatrix(X_test_trojandropper, label=y_test_trojandropper)
watchlist = [(xg_train_trojandropper, 'train'), (xg_test_trojandropper, 'test')]
bst_trojandropper = xgb.train(param, xg_train_trojandropper, num_round, watchlist, early_stopping_rounds=6)

importance_df =  pd.DataFrame(bst_trojandropper.get_fscore().items(), columns=['feature','importance']).sort_values('importance', ascending=False)
importance_df = importance_df.nlargest(25, 'importance')
print importance_df.feature.values

X_train_trojandropper = X_train_trojandropper[importance_df.feature.values]
X_test_trojandropper = X_test_trojandropper[importance_df.feature.values]

X_train_trojandropper = X_train_trojandropper.values
X_test_trojandropper = X_test_trojandropper.values


xg_train_trojandropper = xgb.DMatrix(X_train_trojandropper, label=y_train_trojandropper)
xg_test_trojandropper = xgb.DMatrix(X_test_trojandropper, label=y_test_trojandropper)
watchlist = [(xg_train_trojandropper, 'train'), (xg_test_trojandropper, 'test')]
bst_trojandropper = xgb.train(param, xg_train_trojandropper, num_round, watchlist, early_stopping_rounds=6)
preds_trojandropper = bst_trojandropper.predict(xg_test_trojandropper)
colno = lab_encoder_trojandrop.transform(["trojandropper"])[0]
print colno
L = preds_trojandropper[:, colno]
df['trojandropper'] = L





xg_train_virus = xgb.DMatrix(X_train_virus, label=y_train_virus)
xg_test_virus = xgb.DMatrix(X_test_virus, label=y_test_virus)
watchlist = [(xg_train_virus, 'train'), (xg_test_virus, 'test')]
bst_virus = xgb.train(param, xg_train_virus, num_round, watchlist, early_stopping_rounds=6)

importance_df =  pd.DataFrame(bst_virus.get_fscore().items(), columns=['feature','importance']).sort_values('importance', ascending=False)
importance_df = importance_df.nlargest(25, 'importance')
#print importance_df.feature.values

#X_train_virus = X_train_virus[importance_df.feature.values]

mergedlist = bins

X_train_virus = X_train_virus[mergedlist]
X_test_virus = X_test_virus[mergedlist]

X_train_virus = X_train_virus.values
X_test_virus = X_test_virus.values

xg_train_virus = xgb.DMatrix(X_train_virus, label=y_train_virus)
xg_test_virus = xgb.DMatrix(X_test_virus, label=y_test_virus)
watchlist = [(xg_train_virus, 'train'), (xg_test_virus, 'test')]
bst_virus = xgb.train(param, xg_train_virus, num_round, watchlist, early_stopping_rounds=6)
preds_virus = bst_virus.predict(xg_test_virus)
colno = lab_encoder_virus.transform(["virus"])[0]
print colno
L = preds_virus[:, colno]
df['virus'] = L





xg_train_worms = xgb.DMatrix(X_train_worms, label=y_train_worms)
xg_test_worms = xgb.DMatrix(X_test_worms, label=y_test_worms)
watchlist = [(xg_train_worms, 'train'), (xg_test_worms, 'test')]
bst_worms = xgb.train(param, xg_train_worms, num_round, watchlist, early_stopping_rounds=6)

importance_df =  pd.DataFrame(bst_worms.get_fscore().items(), columns=['feature','importance']).sort_values('importance', ascending=False)
importance_df = importance_df.nlargest(25, 'importance')
print importance_df.feature.values

X_train_worms = X_train_worms[importance_df.feature.values]
X_test_worms = X_test_worms[importance_df.feature.values]

#mergelist  = network + bins
#X_train_worms = X_train_worms[mergelist]
#X_test_worms = X_test_worms[mergelist]


X_train_worms = X_train_worms.values
X_test_worms = X_test_worms.values


xg_train_worms = xgb.DMatrix(X_train_worms, label=y_train_worms)
xg_test_worms = xgb.DMatrix(X_test_worms, label=y_test_worms)
watchlist = [(xg_train_worms, 'train'), (xg_test_worms, 'test')]
bst_worms = xgb.train(param, xg_train_worms, num_round, watchlist, early_stopping_rounds=6)
preds_worms = bst_worms.predict(xg_test_worms)
colno = lab_encoder_worms.transform(["worms"])[0]
print colno
L = preds_worms[:, colno]
df['worms'] = L



print df.shape
print df.head(5)
df1 = df.idxmax(axis=1)
print df1.head(5)
dfList = df1.tolist()
labellist = lab_encoder.transform(dfList)


score = accuracy_score(y_test, labellist)
print score

cnf_matrix = confusion_matrix(y_test, labellist)
np.set_printoptions(precision=2)

# Plot non-normalized confusion matrix
plt.figure()
plot_confusion_matrix(cnf_matrix, classes=lab_encoder.inverse_transform(range(6)),title='Confusion matrix, without normalization')

plt.show()
#print pd.DataFrame(bst.get_fscore().items(), columns=['feature','importance']).sort_values('importance', ascending=False)
#plot_importance(bst)
#pyplot.show()


