#!/usr/bin/python

import json
import numpy as np
import pandas as pd
import itertools
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
from matplotlib.pyplot import *
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, f1_score
import xgboost as xgb
from sklearn import metrics
from numpy import array
from sklearn.metrics import accuracy_score
from xgboost import plot_importance
from matplotlib import pyplot
from numpy import sort
from xgboost import XGBClassifier
from sklearn.feature_selection import SelectFromModel
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
# Confusion plot

from sklearn.metrics import confusion_matrix
import itertools

def correlationWithOutput(df1, y_train):
	headers = ['output']
	df2 = pd.DataFrame(y_train, columns=headers)
	print df1.corrwith(df2.output)


def correlation(threshold, X, headers):
    df = pd.DataFrame(X, columns=headers) 
    col_corr = set() # Set of all the names of deleted columns
    df = df.apply(pd.to_numeric)
    corr_matrix = df.corr()
    #print corr_matrix
    
    for i in range(len(corr_matrix.columns)):
        for j in range(i):
            if corr_matrix.iloc[i, j] >= threshold:
                colname = corr_matrix.columns[i] # getting the name of column
                col_corr.add(colname)
                if colname in df.columns:
                    del df[colname] # deleting the column from the dataset

    print col_corr		
    rows, columns = df.shape
    print rows, columns
    return df


def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    print(cm)

    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt),
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')



csvfile_train = <path_to_csv_containing_training_data>
csvfile_test = <path_to_csv_containing_testing_data>

traindata = pd.read_csv(csvfile_train)
testdata = pd.read_csv(csvfile_test)

traindata = traindata[traindata['family'] != "benign"]
testdata = testdata[testdata['family'] != "benign"]

combinedtrain_final = traindata.reset_index(drop=True)
combinedtest_final = testdata.reset_index(drop=True)

plt.figure(figsize=(40,20))
plt.xticks(fontsize=24, rotation=0)
plt.yticks(fontsize=24, rotation=0)
sns.countplot(data=combinedtrain_final, x='family')
plt.show()

plt.figure(figsize=(40,20))
plt.xticks(fontsize=24, rotation=0)
plt.yticks(fontsize=24, rotation=0)
sns.countplot(data=combinedtest_final, x='family')
plt.show()

unique_family_list = ['worms', 'virus', 'trojandropper', 'trojandownloader', 'trojan', 'backdoor',  'virtool', 'pws']
lab_encoder = LabelEncoder().fit(unique_family_list)

def pre_process_data(data):
	list_family = []
	len_data = len(data)
	i=0

	for row in data.iterrows():
		i+=1
		if i % 500 == 0:
		    print("%s | %s rows" % (i, len_data))
		type_labelized = lab_encoder.transform([row[1].family])[0]
        	list_family.append(type_labelized)
	
	data = data.drop(['family', 'sha256'] , axis=1)#'Attempts to modify Explorer settings to prevent file extensions from being displayed', 'llmnr', 'domain', 'tcp', 'Expresses interest in specific running processes', 'udp', 'Attempts to identify installed AV products by registry key', 'SEARCH', 'modify_security_center_warnings', 'Disables Windows Security features', 'Creates a slightly modified copy of itself', 'system', 'Queries for the computername', 'nbns', 'Attempts to modify Explorer settings to prevent hidden files from being displayed', 'ip entropy', 'Success', 'Total HTTP Packets', 'Queries the disk size which could be used to detect virtual machine with small fixed size or dynamic allocation', 'NOTIFY', 'Installs itself for autorun at Windows startup', 'ssdp', 'Repeatedly searches for a not-found process, you may want to run a web browser during analysis', 'tcp entropy', 'private ip', 'process_count', 'Executes one or more WMI queries which can be used to identify virtual machines', 'http entropy'], axis=1)
	
	feat_names = list(data)	
	list_X = data.values
	list_family = np.array(list_family)
	return list_X, list_family, feat_names


X_train, y_train, feat_names = pre_process_data(combinedtrain_final)
X_test, y_test, feat_names = pre_process_data(combinedtest_final)
print feat_names
print X_train.shape
print y_train.shape
print X_test.shape
print y_test.shape
RANDOM_SEED = 10

'''
#Finding correlation between input features to remove features providing same information and finding correlation between input and output features to check if there is not very few features which are predicting the types
df1 = correlation(0.8, X_train,feat_names)
correlationWithOutput(df1, y_train)
X = df1.values

#Z score normalization for preprocessing
scale = StandardScaler(with_mean=0, with_std=1)
new_X_train = scale.fit_transform(X_train)
new_X_test = scale.transform(X_test)

#Applying PCA
pca = PCA(n_components=49)
pca.fit(X_train)
X_t_train = pca.transform(X_train)
X_t_test = pca.transform(X_test)
variance = pca.explained_variance_ratio_ #calculate variance ratios

var=np.cumsum(np.round(pca.explained_variance_ratio_, decimals=3)*100)
print var #cumulative sum of variance explained with [n] features

plt.ylabel('% Variance Explained')
plt.xlabel('# of Features')
plt.title('PCA Analysis')
plt.ylim(30,100.5)
plt.style.context('seaborn-whitegrid')
plt.plot(var)
plt.show()
'''

param = {
    'bst:max_depth': 3,
    'bst:eta': 0.1,
    'silent': 1,
    'colsample_bytree': 0.4,
    'objective': 'multi:softprob',
    'min_child_weight': 1,
    'subsample': 0.9,
    'num_class': 8,
    'nthread': 4,
    'seed': RANDOM_SEED
}
ITERATIONS = 300
probs = np.ones((len(y_test), 8))

xg_train = xgb.DMatrix(X_train, label=y_train)
xg_test = xgb.DMatrix(X_test, label=y_test)
watchlist = [(xg_train, 'train'), (xg_test, 'test')]
num_round = 1000
bst = xgb.train(param, xg_train, num_round, watchlist, early_stopping_rounds=6)
preds = bst.predict(xg_test)
probs = np.multiply(probs, preds)
preds = np.array([np.argmax(prob) for prob in preds])

score = accuracy_score(y_test, preds)
print score

cnf_matrix = confusion_matrix(y_test, preds)
np.set_printoptions(precision=2)

# Plot non-normalized confusion matrix
plt.figure()
plot_confusion_matrix(cnf_matrix, classes=lab_encoder.inverse_transform(range(8)),title='Confusion matrix, without normalization')

plt.show()

#plot_importance(bst)
#pyplot.show()


