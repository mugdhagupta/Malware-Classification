#!/usr/bin/python

import shutil
import os, subprocess
import hashlib
from shutil import move
import pandas as pd
import json
import numpy as np
import re
from imblearn.over_sampling import RandomOverSampler
from imblearn.combine import SMOTEENN 

import matplotlib.pyplot as plt
from matplotlib.pyplot import *
import seaborn as sns
from numpy import array
from matplotlib import pyplot
from numpy import sort
from imblearn.over_sampling import SMOTE
from imblearn.combine import SMOTETomek 

json_dest_dir = <path_to_json_directory>
pcap_dest_dir = <path_to_pcap_directory>	


malware_directories = [<path_to_malware_directories>]

malware_shas = set()
malwarefile = <path_to_file_containing_shas>

virustotal_directories = [<path_to_directory_containing_virustotal_AV_reports>]

csvfile = <path_to_training_data>
family_type = <path_to_csv_to_store_synthetic_data>

with open(malwarefile, 'rb') as f:
	for line in f:
		if line.endswith('\n'):
            		line = line[:-1]
			malware_shas.add(line)

def extract_label(f):
	input_file=open(f, 'r')
	json_decode=json.load(input_file)
	for engine, signature in json_decode.get("scans", {}).items():
		if(engine == "Microsoft"):
			if signature["detected"] == True:
				return signature["result"]


	return "empty"


dict = {}
for direc in virustotal_directories:
	count = 0
	for root, dirs, files in os.walk(direc):
		for f in files:
			filename = os.path.join(root, f)
			current_hash = f.split('.')			
			print filename, current_hash[0]
		
			if current_hash[0] in malware_shas:
				family = extract_label(filename)
				print family
				if(family != "empty"):
					if "Backdoor" in family:
						fam = family.split('/')
						print fam[0], fam[1]
						dotpos = fam[1].find('.')
		
						if(dotpos == -1):
							ext_family = fam[1]
						else:
							ext_family = fam[1][:dotpos] 
		
						#if ext_family in dict:
						#	dict[ext_family] += 1
						#else:
						#	dict[ext_family] = 1
						if any(x == ext_family for x in ["Zegost","Hupigon", "IRCbot", "Delf", "Cycbot", "Sdbot", "VB", "Bifrose"]):
							dict[current_hash[0]] = ext_family
						
	print direc
	print count

'''for k, v in dict.items():
	if v >= 50:
		print k,v
'''
df = pd.read_csv(csvfile)

df1 = df[df['family'] == "backdoor_rbot"]
print df1.shape

df2 = df[df['family'] == "backdoor"]

for i, fam in df2.iterrows():
	row = df2.at[i, 'sha256']
	if row in dict:
		df2.at[i, 'family'] = dict[row]


df_less = df2[df2['family'] == "Zegost"]
print df_less.shape	

df_new = pd.concat([df1, df_less])
df_family = df_new[['family']]
df_new = df_new.drop(['family', 'sha256'] , axis=1)
feat_names = list(df_new)

ros = SMOTE(n_jobs=-1, random_state=42)
X_ros, y_ros = ros.fit_sample(df_new.values, df_family.values.ravel())
print(X_ros.shape[0] - df_new.shape[0], 'new random picked points')

X_df = pd.DataFrame(X_ros, columns=feat_names)
y_df = pd.DataFrame(y_ros, columns=['family'])

combined = pd.concat([X_df, y_df], axis=1)

print combined.head(5)

for x in ["Hupigon", "IRCbot", "Delf", "Cycbot", "Sdbot", "VB", "Bifrose"]:
	df_less = df2[df2['family'] == x]
	#print df_less.shape	
	
	df_new = pd.concat([df1, df_less])
	df_family = df_new[['family']]
	df_new = df_new.drop(['family', 'sha256'] , axis=1)
	feat_names = list(df_new)

	ros = SMOTE(n_jobs=-1, random_state=42)
	X_ros, y_ros = ros.fit_sample(df_new.values, df_family.values.ravel())
	print(X_ros.shape[0] - df_new.shape[0], 'new random picked points')

	X_df = pd.DataFrame(X_ros, columns=feat_names)
	y_df = pd.DataFrame(y_ros, columns=['family'])

	df_final = pd.concat([X_df, y_df], axis=1)
	df_final = df_final[df_final['family'] == x]

	combined = pd.concat([combined, df_final])
	print combined.shape


df_rest = df[df['family'] != "backdoor"]
df_rest = df_rest[df_rest['family'] != "backdoor_rbot"]
print df_rest.shape

combined = pd.concat([combined, df_rest])
print combined.shape
with open(family_type,'w') as f:
	combined.to_csv(f, index = False)			






