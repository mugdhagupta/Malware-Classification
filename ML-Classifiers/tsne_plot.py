#!/usr/bin/python


import json
import numpy as np
import pandas as pd
import itertools
import matplotlib.pyplot as plt
from matplotlib.pyplot import *
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn import metrics
from numpy import array
from sklearn.metrics import accuracy_score
from xgboost import plot_importance
from matplotlib import pyplot
from numpy import sort
from sklearn.decomposition import PCA
import itertools
from collections import Counter

import prettyplotlib as ppl
import matplotlib as mpl
from prettyplotlib import brewer2mpl
import random
import time
from ggplot import *
from sklearn.manifold import TSNE

csvfile_train = <path_to_file_containing_train_or_test_data_having_labels_as_malware_types>

combined =pd.read_csv(csvfile_train)

print combined.shape
combined = combined.reset_index(drop=True)

unique_family_list = ['worms','virus','trojandropper', 'trojandownloader', 'trojan', 'backdoor']
lab_encoder = LabelEncoder().fit(unique_family_list)

def pre_process_data(data):
	list_family = []
	len_data = len(data)
	i=0

	for row in data.iterrows():
		i+=1
		if i % 500 == 0:
		    print("%s | %s rows" % (i, len_data))
		type_labelized = lab_encoder.transform([row[1].family])[0]
        	list_family.append(type_labelized)
	
	data = data.drop(['family', 'sha256'], axis=1)
	
	feat_names = list(data)	
	list_X = data.values
	list_family = np.array(list_family)
	return list_X, list_family, feat_names

X_train, y_train, feat_names = pre_process_data(combined)

pca = PCA(n_components=3)
pca_result = pca.fit_transform(X_train)

combined['pca-one'] = pca_result[:,0]
combined['pca-two'] = pca_result[:,1] 
combined['pca-three'] = pca_result[:,2]

print 'Explained variation per principal component: {}'.format(pca.explained_variance_ratio_)

rndperm = np.random.permutation(combined.shape[0])

chart = ggplot( combined.loc[rndperm[:3000],:], aes(x='pca-one', y='pca-two', color='family') ) \
        + geom_point(size=75,alpha=0.8) \
        + ggtitle("First and Second Principal Components colored by family")
chart.show()


n_sne = 7000

time_start = time.time()
tsne = TSNE(n_components=2, verbose=1, perplexity=40, n_iter=300)
tsne_results = tsne.fit_transform(combined.loc[rndperm[:n_sne],feat_names].values)

print 't-SNE done! Time elapsed: {} seconds'.format(time.time()-time_start)

df_tsne = combined.loc[rndperm[:n_sne],:].copy()
df_tsne['x-tsne'] = tsne_results[:,0]
df_tsne['y-tsne'] = tsne_results[:,1]

chart = ggplot( df_tsne, aes(x='x-tsne', y='y-tsne', color='family') ) \
        + geom_point(size=70,alpha=0.1) \
        + ggtitle("tSNE dimensions colored by type")
chart.show()

