#!/usr/bin/python

import shutil
import os, subprocess
import json
import numpy as np
import pandas as pd
import re

existing_reports  = [<path_to_json_reports>]
malware_families = <path_to_save_in_csv>
tempfile = <path_to_temp_file>


def from_file(f):
	input_file=open(f, 'r')
	json_decode=json.load(input_file)
	if "virustotal" in json_decode:		
		virustotal = json_decode["virustotal"]
		if "normalized" in virustotal:		
			result = virustotal["normalized"]
			return result

def from_response(f):
	norm_lower = []	
	input_file=open(f, 'r')
	json_decode=json.load(input_file)
	for engine, signature in json_decode.get("scans", {}).items():
		if signature["detected"] == True:		
			normalized = normalize(str(signature["result"]))
			for norm_word in normalized:
				if norm_word not in norm_lower:
					norm_lower.append(str(norm_word))

	return norm_lower

#blacklist taken from cuckoo sandbox
def normalize(variant):
        """Normalize the variant name provided by an Anti Virus engine. This
        attempts to extract the useful parts of a variant name by stripping
        all the boilerplate stuff from it."""
        
	VARIANT_BLACKLIST = [
        "generic", "malware", "trojan", "agent", "win32", "multi", "w32",
        "trojanclicker", "trojware", "win", "a variant of win32", "trj",
        "susp", "dangerousobject", "backdoor", "clicker", "variant", "heur",
        "gen", "virus", "dropper", "generic suspicious", "spyware", "program",
        "suspectcrc", "corrupt", "behaveslike", "crypt", "adclicker",
        "troj", "injector", "cryptor", "packed", "adware", "macro", "msil4",
        "suspicious", "worm", "msil", "msword", "drop", "keygen", "office",
        "password", "malpack", "lookslike", "banker", "riskware", "unwanted",
        "unclassifiedmalware", "ransom", "trojan horse", "trjndwnlder",
        "trojandwnldr", "autorun", "trojandownloader", "trojandwnldr", "text",
        "download", "excel", "msilobfuscator", "rootkit", "application",
        "a variant of win64", "w97m", "shellcode", "o97m", "exploit",
        "x97m", "maliciousmacro", "downldr", "msexcel", "pp97m", "other",
        "trojandropper", "crypter", "a variant of msil", "macrodown",
        "trojanapt", "dwnldr", "downldexe", "dload", "trojanhorse", "toolbar",
        "mailer", "obfus", "obfuscator", "suspicious file", "optional",
        "suspected of trojan", "heuristic", "rogue", "virtool", "infostealer",
        "generic downloader", "generic malware", "undef", "inject", "packer",
        "generic backdoor", "word", "macosx", "hack", "unknown", "downloader",
        "trojanspy", "dldr", "msoffice", "osx32", "script", "stealer",
        "not a virus", "html", "expl", "shellkode", "downagent", "win64",
        "applicunwnt", "heur2", "ddos", "avkill", "servstart", "normal",
        "encoder", "w2km_dloader", "docdl", "w97m_dloadr", "mo97", "dloader",
        "x2km_dloadr", "w2km_dload", "w2km_dloade", "x2km_droppr", "exedown",
        "encodefeature", "docdrop", "mw97", "adload", "a variant of pp97m",
        "a variant of w97m", "badmacro", "bkdr", "docdrp", "exedrop",
        "generic trojan", "malcrypt", "malicious website", "ransomlock",
        "ransomcrypt", "reputation", "trojanransom", "pepatch", "risk",
        "adplugin", "webtoolbar", "malagent", "genmalicious", "vbinject",
        "vbcrypt", "inject2", "mdropper", "download3", "keylogger",
        "downloader11", "damaged", "file", "dldrop", "msil7", "injcrypt",
        "patched", "patchfile", "downware", "dropped",
    	]

	if not variant:
            return []

        ret = []

        # Handles "CVE-2012-1234", "CVE2012-1234".
        cve = re.search("CVE[-_]?(\\d{4})[-_](\\d{4})", variant)
        if cve:
            ret.append("CVE-%s-%s" % (cve.group(1), cve.group(2)))

        # Handles "CVE121234".
        cve = re.search("CVE(\\d{2})(\\d{4})", variant)
        if cve:
            ret.append("CVE-20%s-%s" % (cve.group(1), cve.group(2)))

        for word in re.split("[\\.\\,\\-\\(\\)\\[\\]/!:_]", variant):
            word = word.strip()
            if len(word) < 4:
                continue

            if word.lower() in VARIANT_BLACKLIST:
                continue

            # Random hashes that are specific to this file.
            if re.match("[a-fA-F0-9]+$", word):
                continue

            # Family names followed by "potentially unwanted".
            if re.match("[a-zA-Z]{1,2} potentially unwanted", word.lower()):
                continue

            ret.append(word)
        return ret	

def calc_freq_report(f, word):
	input_file=open(f, 'r')
	json_decode=json.load(input_file)
	if "virustotal" in json_decode:		
		virustotal = json_decode["virustotal"]
		with open(tempfile, 'w') as outfile:
			json.dump(virustotal, outfile)
		file  = open(tempfile, 'r').read()
		return file.count(word)
	else: return 0

def calc_freq_response(f, word):
	file  = open(f, 'r').read()
	return file.count(word)


'''
def extract_filename(f):
	finput_file=open(f, 'r')
	json_decode=json.load(input_file)
	if "target" in json_decode:		
		target = json_decode["target"]
		if "file" in target:		
			fi = target["file"]
'''			


#from_file and calc_freq_report functions are used to extract and calculate frequency of normalized keywords from virustotal report got during the execution of sample in cuckoo sandbox and from_response and calc_freq_response are used to extract and calculate frequency of normalized keywords from virustotal report got after using their private api	
AV_list_total = [[]]
for direc in existing_reports:
	for root, dirs, files in os.walk(direc):
		for f in files:
			normalized_list = []
			AV_list = []
					
			filename = os.path.join(root, f)
			print filename	
			
			
			normalized_list = from_file(filename)
			if normalized_list is not None:			
				dict = {}
				finaldict = {}
				for word in normalized_list:
					dict[word] = calc_freq_report(filename, word)
			
				for key, val in dict.items():
					if key.lower() in finaldict:
						finaldict[key.lower()] += val
					else:
						finaldict[key.lower()] = val

				highest_key = []
				highest_val = 0
				for key, value in finaldict.items():
					if value > highest_val:
						highest_val = value
			
				for key, value in finaldict.items():
					if value == highest_val:
						highest_key.append(str(key))
			
				AV_list.append(filename)
				AV_list.append((highest_key))
			
				AV_list_total.append(AV_list)


df=pd.DataFrame(AV_list_total,columns=['hash','family'])

df.to_csv(malware_families, sep='\t', index = False)

