import shutil
import os, subprocess
import json
import numpy as np
import hashlib
import pandas as pd
from shutil import move
import matplotlib.pyplot as plt

existing_reports  = [<path_to_json_reports>]

dll_mal = <path_to_csv_file_to_save_results>
bins_mal = <path_to_csv_file_to_save_results>

dll_freq = {}
bins_types = {}


#calculate the frequency of dlls in training set
def find_dll(f):
	input_file=open(f, 'r')
	json_decode=json.load(input_file)
	if "behavior" in json_decode:
		behavior = json_decode["behavior"]
		if "generic" in behavior:
			for generic in behavior.get("generic", {}):
				if "summary" in generic:				
					summary =  generic["summary"]
					if "dll_loaded"	in summary:				
						for dll in summary.get("dll_loaded", {}):
							dll_l = dll.lower()							
							if dll_l in dll_freq:
								dll_freq[dll_l] += 1
							else:
								dll_freq[dll_l] = 1
								

#calculate the frequency of dlls in training set
def find_bins(f):
	input_file=open(f, 'r')
	json_decode=json.load(input_file)
	if "behavior" in json_decode:
		behavior = json_decode["behavior"]
		if "processes" in behavior:
			for processes in behavior.get("processes", {}):
				if "calls" in processes:				
					for calls in processes.get("calls", {}):
						if "category" in calls:
							cat = calls["category"]
							if cat in bins_types:	
								bins_types[cat] += 1
							else:
								bins_types[cat] = 1


for direc in existing_reports:
	for root, dirs, files in os.walk(direc):
		for f in files:
			filename = os.path.join(root, f)
			print filename
			find_dll(filename)
			find_bins(filename)


total_li = [[]]
for key, val in dll_freq.items():
	li = []
	li.append((key).encode("utf-8"))
	li.append(val)
	total_li.append(li)

total_list = [[]]
for key, val in bins_types.items():
	li = []
	li.append((key).encode("utf-8"))
	li.append(val)
	total_list.append(li)

df=pd.DataFrame(total_li,columns=['DLL','count'])
df = df.sort_values(by=['count'])	

with open(dll_mal, 'a') as f:
	df.to_csv(f, index = False)

df=pd.DataFrame(total_list,columns=['bins','count'])
df = df.sort_values(by=['count'])	

with open(bins_mal, 'a') as f:
	df.to_csv(f, index = False)
																																																							

plt.bar(list(bins_types.keys()), bins_types.values(), color='r')
plt.show()

